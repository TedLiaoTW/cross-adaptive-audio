;    Copyright 2015 Oeyvind Brandtsegg
;
;    This file is part of the Signal Interaction Toolkit
;
;    The Signal Interaction Toolkit is free software: you can redistribute it and/or modify
;    it under the terms of the GNU General Public License version 3
;    as published by the Free Software Foundation.
;
;    The Signal Interaction Toolkit is distributed in the hope that it will be useful,
;    but WITHOUT ANY WARRANTY; without even the implied warranty of
;    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;    GNU General Public License for more details.
;
;    You should have received a copy of the GNU General Public License
;    along with The Signal Interaction Toolkit.
;    If not, see <http://www.gnu.org/licenses/>.

<CsoundSynthesizer>
    <CsOptions>
        -i input/{{ sound_filename }}
    </CsOptions>
    <CsInstruments>
        sr = 44100
        ksmps = {{ ksmps }}
        nchnls = 1
        0dbfs = 1

        pyinit

        instr 1

        pyruni {{ '{{' }}
from reader import Reader
import standardizer
my_reader = Reader(data_sound_filename='{{ data_sound_filename }}')
        {{ '}}' }}

        ;****************************************************************
        ; LPF18 Filter
        ;****************************************************************
        aIn		in
        kinlevl		= 1
        aIn		= aIn *kinlevl
        pyrun "k_drive = standardizer.Standardizer.get_normalized_value(my_reader.get_next_value('mfcc_1'))"
        kDrive pyeval "standardizer.Standardizer.get_mapped_value(k_drive, 1, 12)"
        kDrive		tonek kDrive, 10
        pyrun "k_freq = standardizer.Standardizer.get_normalized_value(my_reader.get_next_value('mfcc_2'))"
        kFreq pyeval "standardizer.Standardizer.get_mapped_value(k_freq, 20, 10000, skew_factor=0.35)"
        kFreq		tonek kFreq, 10
        pyrun "k_resonance = standardizer.Standardizer.get_normalized_value(my_reader.get_next_value('mfcc_5'))"
        kResonance pyeval "standardizer.Standardizer.get_mapped_value(k_resonance, 0.001, 0.95)"
        kResonance	tonek kResonance, 1
        pyrun "k_dist = standardizer.Standardizer.get_normalized_value(my_reader.get_next_value('mfcc_4'))"
        kDist pyeval "standardizer.Standardizer.get_mapped_value(k_dist, 0.001, 10, skew_factor=0.5)"
        kDist		tonek kDist, 10
        kAutoLevel	= 0.9
        pyrun "k_mix = standardizer.Standardizer.get_normalized_value(my_reader.get_next_value('mfcc_amp'))"
        kMix pyeval "standardizer.Standardizer.get_mapped_value(k_mix, 0.0, 1.0)"
        kMix		tonek kMix, 100

        ; stage 1, distortion
        kpregain	= kDrive				; dist amount
        ishape		= 0.8					; dist shaping
        kpostgain	= (0.5 / kpregain) * (kpregain*0.5)	; auto set output gain corresponding to input drive
        ishape1 	= ishape*1.6
        ishape2		= ishape
        adist	 	distort1 aIn, kpregain, kpostgain, ishape1, ishape2

        ; stage 2, lpf18 filter
        denorm adist
        afilt		lpf18 adist, kFreq, kResonance, kDist
        kleveladjust	= 1/(sqrt(kDrive)+(kDist*2))				; attempt automatic level adjustment according to distortion drive
        afilt		= (afilt*(1-kAutoLevel))+(afilt*kleveladjust*kAutoLevel)	; and select balance between autogained and straight dist signal
        aOut		= (afilt*kMix)+(aIn*(1-kMix))

        out aOut

        endin
    </CsInstruments>
    <CsScore>
        i1 0 {{ duration }}
        e
    </CsScore>
</CsoundSynthesizer>
