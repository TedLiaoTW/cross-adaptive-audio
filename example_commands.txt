# Compare output activation functions
python main.py -i drums.wav noise.wav -g 10 -p 20 --keep-k-best 1 --num-runs 20 --experiment-settings amplitude.json --output-activation-function linear
python main.py -i drums.wav noise.wav -g 10 -p 20 --keep-k-best 1 --num-runs 20 --experiment-settings amplitude.json --output-activation-function sigmoid
python main.py -i drums.wav noise.wav -g 10 -p 20 --keep-k-best 1 --num-runs 20 --experiment-settings amplitude.json --output-activation-function sine
python plot.py --label output_activation_function --output plot_output_activation_functions_avg.png --avg

# Compare fitness functions
python main.py -i drums.wav noise.wav --experiment-settings spectral_basic.json --keep-k-best 0 --keep-all-last --num-runs 20 --fitness similarity
python main.py -i drums.wav noise.wav --experiment-settings spectral_basic.json --keep-k-best 0 --keep-all-last --num-runs 20 --fitness multi-objective
python main.py -i drums.wav noise.wav --experiment-settings spectral_basic.json --keep-k-best 0 --keep-all-last --num-runs 10 --fitness hybrid
python main.py -i drums.wav noise.wav --experiment-settings spectral_basic.json --keep-k-best 0 --keep-all-last --num-runs 20 --fitness novelty
python main.py -i drums.wav noise.wav --experiment-settings spectral_basic.json --keep-k-best 0 --keep-all-last --num-runs 20 --fitness mixed
python plot.py --label fitness --output plot_fitness_avg.png --avg

# Compare NEAT and FS-NEAT
python main.py -i sine_sweep.wav noise.wav -p 24 -g 40 --keep-k-best 1 --num-runs 20 --keep-all-last --experiment-settings all.json --effect lpf --add-link-prob 0.3 --rem-link-prob 0.3
python main.py -i sine_sweep.wav noise.wav -p 24 -g 40 --keep-k-best 1 --num-runs 20 --keep-all-last --experiment-settings all.json --effect lpf --add-link-prob 0.3 --rem-link-prob 0.3 --fs-neat
python plot.py --output plot_neat_vs_fs_neat_avg.png --avg

# Compare add/remove link rates in FS-NEAT
python main.py -i sine_sweep.wav noise.wav -p 24 --keep-k-best 0 --num-runs 10 --fitness hybrid --experiment-settings all.json --effect lpf --fs-neat --add-link-prob 0.03 --rem-link-prob 0.03
python main.py -i sine_sweep.wav noise.wav -p 24 --keep-k-best 0 --num-runs 10 --fitness hybrid --experiment-settings all.json --effect lpf --fs-neat --add-link-prob 0.1 --rem-link-prob 0.1
python main.py -i sine_sweep.wav noise.wav -p 24 --keep-k-best 0 --num-runs 10 --fitness hybrid --experiment-settings all.json --effect lpf --fs-neat --add-link-prob 0.2 --rem-link-prob 0.2
python main.py -i sine_sweep.wav noise.wav -p 24 --keep-k-best 0 --num-runs 10 --fitness hybrid --experiment-settings all.json --effect lpf --fs-neat --add-link-prob 0.3 --rem-link-prob 0.3
python main.py -i sine_sweep.wav noise.wav -p 24 --keep-k-best 0 --num-runs 10 --fitness hybrid --experiment-settings all.json --effect lpf --fs-neat --add-link-prob 0.4 --rem-link-prob 0.4
python main.py -i sine_sweep.wav noise.wav -p 24 --keep-k-best 0 --num-runs 10 --fitness hybrid --experiment-settings all.json --effect lpf --fs-neat --add-link-prob 0.5 --rem-link-prob 0.5
python plot.py --label add_link_probability --output plot_add_remove_link_prob.png --avg

# Compare survival rates
python main.py -i drums.wav noise.wav --keep-k-best 0 --fitness multi-objective --experiment-settings spectral_basic.json --num-runs 10 --survival-rate 0.25
python main.py -i drums.wav noise.wav --keep-k-best 0 --fitness multi-objective --experiment-settings spectral_basic.json --num-runs 10 --survival-rate 0.35
python main.py -i drums.wav noise.wav --keep-k-best 0 --fitness multi-objective --experiment-settings spectral_basic.json --num-runs 10 --survival-rate 0.4
python main.py -i drums.wav noise.wav --keep-k-best 0 --fitness multi-objective --experiment-settings spectral_basic.json --num-runs 10 --survival-rate 0.45
python main.py -i drums.wav noise.wav --keep-k-best 0 --fitness multi-objective --experiment-settings spectral_basic.json --num-runs 10 --survival-rate 0.5
python main.py -i drums.wav noise.wav --keep-k-best 0 --fitness multi-objective --experiment-settings spectral_basic.json --num-runs 10 --survival-rate 0.55
python plot.py --label survival_rate --output plot_survival_rate.png --avg

# Compare elitism rates
python main.py -i drums.wav noise.wav --keep-k-best 0 --num-runs 10 --fitness multi-objective --experiment-settings spectral_basic.json --elitism 0.1 && python main.py -i drums.wav noise.wav --keep-k-best 0 --num-runs 10 --fitness multi-objective --experiment-settings spectral_basic.json --elitism 0.15 && python main.py -i drums.wav noise.wav --keep-k-best 0 --num-runs 10 --fitness multi-objective --experiment-settings spectral_basic.json --elitism 0.2 && python main.py -i drums.wav noise.wav --keep-k-best 0 --num-runs 10 --fitness multi-objective --experiment-settings spectral_basic.json --elitism 0.25 && python main.py -i drums.wav noise.wav --keep-k-best 0 --num-runs 10 --fitness multi-objective --experiment-settings spectral_basic.json --elitism 0.3 && python main.py -i drums.wav noise.wav --keep-k-best 0 --num-runs 10 --fitness multi-objective --experiment-settings spectral_basic.json --elitism 0.35
python plot.py --label elitism --output plot_elitism_avg.png --avg

# Compare increased survival rate & elitism rate with default settings in similarity fitness experiment
python main.py -i drums.wav noise.wav --fitness similarity --experiment-settings spectral_basic.json --keep-k-best 0 --num-runs 10 && python main.py -i drums.wav noise.wav --fitness similarity --experiment-settings spectral_basic.json --keep-k-best 0 --num-runs 10 --survival-rate 0.33 --elitism 0.2
python plot.py --output plot_survival_rate_elitism.png --avg

# Good noise to drums example
python main.py -i drums.wav noise.wav --neural-mode ab --seed 659495
python main.py -i drums_short.wav noise_short.wav --experiment-settings mfcc_bark.json --seed 618513

# Make a couple of sine generators with distortion sound like drums
python main.py -i drums.wav silence.wav -p 20 -g 1300 --experiment-settings csound_bark.json --patience 2500 --keep-k-best 1 --keep-all-last --effects sine sine new_layer gain

# XOR-like experiment. Typically doesn't find an optimal solution.
python main.py -i xor_target.wav xor_input.wav --neural-mode b --experiment-settings csound_basic_rms.json -g 1000 --keep-k-best 1 --keep-all-last --effect noise --patience 1000 --num-runs 5 -p 500 --max-weight 22.0 --write-stats-every 10 --weight-mutation-max-power 4.0 --interspecies-crossover-rate 0.1

# Grid search mutation rate and crossover rate
python main.py -i drums_short.wav noise_short.wav --crossover-rate 0.2 --mutation-rate 0.2 --num-runs 250 --keep-k-best 0 --write-stats-every 25
python main.py -i drums_short.wav noise_short.wav --crossover-rate 0.2 --mutation-rate 0.3 --num-runs 250 --keep-k-best 0 --write-stats-every 25
python main.py -i drums_short.wav noise_short.wav --crossover-rate 0.2 --mutation-rate 0.4 --num-runs 250 --keep-k-best 0 --write-stats-every 25
python main.py -i drums_short.wav noise_short.wav --crossover-rate 0.2 --mutation-rate 0.5 --num-runs 250 --keep-k-best 0 --write-stats-every 25
python main.py -i drums_short.wav noise_short.wav --crossover-rate 0.2 --mutation-rate 0.6 --num-runs 250 --keep-k-best 0 --write-stats-every 25
python main.py -i drums_short.wav noise_short.wav --crossover-rate 0.2 --mutation-rate 0.7 --num-runs 250 --keep-k-best 0 --write-stats-every 25
python main.py -i drums_short.wav noise_short.wav --crossover-rate 0.2 --mutation-rate 0.8 --num-runs 250 --keep-k-best 0 --write-stats-every 25
python main.py -i drums_short.wav noise_short.wav --crossover-rate 0.3 --mutation-rate 0.2 --num-runs 250 --keep-k-best 0 --write-stats-every 25
python main.py -i drums_short.wav noise_short.wav --crossover-rate 0.3 --mutation-rate 0.3 --num-runs 250 --keep-k-best 0 --write-stats-every 25
python main.py -i drums_short.wav noise_short.wav --crossover-rate 0.3 --mutation-rate 0.4 --num-runs 250 --keep-k-best 0 --write-stats-every 25
python main.py -i drums_short.wav noise_short.wav --crossover-rate 0.3 --mutation-rate 0.5 --num-runs 250 --keep-k-best 0 --write-stats-every 25
python main.py -i drums_short.wav noise_short.wav --crossover-rate 0.3 --mutation-rate 0.6 --num-runs 250 --keep-k-best 0 --write-stats-every 25
python main.py -i drums_short.wav noise_short.wav --crossover-rate 0.3 --mutation-rate 0.7 --num-runs 250 --keep-k-best 0 --write-stats-every 25
python main.py -i drums_short.wav noise_short.wav --crossover-rate 0.3 --mutation-rate 0.8 --num-runs 250 --keep-k-best 0 --write-stats-every 25
python main.py -i drums_short.wav noise_short.wav --crossover-rate 0.4 --mutation-rate 0.2 --num-runs 250 --keep-k-best 0 --write-stats-every 25
python main.py -i drums_short.wav noise_short.wav --crossover-rate 0.4 --mutation-rate 0.3 --num-runs 250 --keep-k-best 0 --write-stats-every 25
python main.py -i drums_short.wav noise_short.wav --crossover-rate 0.4 --mutation-rate 0.4 --num-runs 250 --keep-k-best 0 --write-stats-every 25
python main.py -i drums_short.wav noise_short.wav --crossover-rate 0.4 --mutation-rate 0.5 --num-runs 250 --keep-k-best 0 --write-stats-every 25
python main.py -i drums_short.wav noise_short.wav --crossover-rate 0.4 --mutation-rate 0.6 --num-runs 250 --keep-k-best 0 --write-stats-every 25
python main.py -i drums_short.wav noise_short.wav --crossover-rate 0.4 --mutation-rate 0.7 --num-runs 250 --keep-k-best 0 --write-stats-every 25
python main.py -i drums_short.wav noise_short.wav --crossover-rate 0.4 --mutation-rate 0.8 --num-runs 250 --keep-k-best 0 --write-stats-every 25
python main.py -i drums_short.wav noise_short.wav --crossover-rate 0.5 --mutation-rate 0.2 --num-runs 250 --keep-k-best 0 --write-stats-every 25
python main.py -i drums_short.wav noise_short.wav --crossover-rate 0.5 --mutation-rate 0.3 --num-runs 250 --keep-k-best 0 --write-stats-every 25
python main.py -i drums_short.wav noise_short.wav --crossover-rate 0.5 --mutation-rate 0.4 --num-runs 250 --keep-k-best 0 --write-stats-every 25
python main.py -i drums_short.wav noise_short.wav --crossover-rate 0.5 --mutation-rate 0.5 --num-runs 250 --keep-k-best 0 --write-stats-every 25
python main.py -i drums_short.wav noise_short.wav --crossover-rate 0.5 --mutation-rate 0.6 --num-runs 250 --keep-k-best 0 --write-stats-every 25
python main.py -i drums_short.wav noise_short.wav --crossover-rate 0.5 --mutation-rate 0.7 --num-runs 250 --keep-k-best 0 --write-stats-every 25
python main.py -i drums_short.wav noise_short.wav --crossover-rate 0.5 --mutation-rate 0.8 --num-runs 250 --keep-k-best 0 --write-stats-every 25
python main.py -i drums_short.wav noise_short.wav --crossover-rate 0.6 --mutation-rate 0.2 --num-runs 250 --keep-k-best 0 --write-stats-every 25
python main.py -i drums_short.wav noise_short.wav --crossover-rate 0.6 --mutation-rate 0.3 --num-runs 250 --keep-k-best 0 --write-stats-every 25
python main.py -i drums_short.wav noise_short.wav --crossover-rate 0.6 --mutation-rate 0.4 --num-runs 250 --keep-k-best 0 --write-stats-every 25
python main.py -i drums_short.wav noise_short.wav --crossover-rate 0.6 --mutation-rate 0.5 --num-runs 250 --keep-k-best 0 --write-stats-every 25
python main.py -i drums_short.wav noise_short.wav --crossover-rate 0.6 --mutation-rate 0.6 --num-runs 250 --keep-k-best 0 --write-stats-every 25
python main.py -i drums_short.wav noise_short.wav --crossover-rate 0.6 --mutation-rate 0.7 --num-runs 250 --keep-k-best 0 --write-stats-every 25
python main.py -i drums_short.wav noise_short.wav --crossover-rate 0.6 --mutation-rate 0.8 --num-runs 250 --keep-k-best 0 --write-stats-every 25
python main.py -i drums_short.wav noise_short.wav --crossover-rate 0.7 --mutation-rate 0.2 --num-runs 250 --keep-k-best 0 --write-stats-every 25
python main.py -i drums_short.wav noise_short.wav --crossover-rate 0.7 --mutation-rate 0.3 --num-runs 250 --keep-k-best 0 --write-stats-every 25
python main.py -i drums_short.wav noise_short.wav --crossover-rate 0.7 --mutation-rate 0.4 --num-runs 250 --keep-k-best 0 --write-stats-every 25
python main.py -i drums_short.wav noise_short.wav --crossover-rate 0.7 --mutation-rate 0.5 --num-runs 250 --keep-k-best 0 --write-stats-every 25
python main.py -i drums_short.wav noise_short.wav --crossover-rate 0.7 --mutation-rate 0.6 --num-runs 250 --keep-k-best 0 --write-stats-every 25
python main.py -i drums_short.wav noise_short.wav --crossover-rate 0.7 --mutation-rate 0.7 --num-runs 250 --keep-k-best 0 --write-stats-every 25
python main.py -i drums_short.wav noise_short.wav --crossover-rate 0.7 --mutation-rate 0.8 --num-runs 250 --keep-k-best 0 --write-stats-every 25
python main.py -i drums_short.wav noise_short.wav --crossover-rate 0.8 --mutation-rate 0.2 --num-runs 250 --keep-k-best 0 --write-stats-every 25
python main.py -i drums_short.wav noise_short.wav --crossover-rate 0.8 --mutation-rate 0.3 --num-runs 250 --keep-k-best 0 --write-stats-every 25
python main.py -i drums_short.wav noise_short.wav --crossover-rate 0.8 --mutation-rate 0.4 --num-runs 250 --keep-k-best 0 --write-stats-every 25
python main.py -i drums_short.wav noise_short.wav --crossover-rate 0.8 --mutation-rate 0.5 --num-runs 250 --keep-k-best 0 --write-stats-every 25
python main.py -i drums_short.wav noise_short.wav --crossover-rate 0.8 --mutation-rate 0.6 --num-runs 250 --keep-k-best 0 --write-stats-every 25
python main.py -i drums_short.wav noise_short.wav --crossover-rate 0.8 --mutation-rate 0.7 --num-runs 250 --keep-k-best 0 --write-stats-every 25
python main.py -i drums_short.wav noise_short.wav --crossover-rate 0.8 --mutation-rate 0.8 --num-runs 250 --keep-k-best 0 --write-stats-every 25
python plot_heatmap.py --output crossover_mutation_grid_search.png --dimensions crossover_rate mutation_rate

# Compare add/remove link rates
python main.py -i drums_short.wav noise_short.wav -g 50 --num-runs 200 --keep-k-best 0 --write-stats-every 55 --add-neuron-prob 0.03 --add-link-prob 0.03 --rem-link-prob 0.03 --rem-simple-neuron-prob 0.03
python main.py -i drums_short.wav noise_short.wav -g 50 --num-runs 200 --keep-k-best 0 --write-stats-every 55 --add-neuron-prob 0.06 --add-link-prob 0.06 --rem-link-prob 0.06 --rem-simple-neuron-prob 0.06
python main.py -i drums_short.wav noise_short.wav -g 50 --num-runs 200 --keep-k-best 0 --write-stats-every 55 --add-neuron-prob 0.09 --add-link-prob 0.09 --rem-link-prob 0.09 --rem-simple-neuron-prob 0.09
python main.py -i drums_short.wav noise_short.wav -g 50 --num-runs 200 --keep-k-best 0 --write-stats-every 55 --add-neuron-prob 0.15 --add-link-prob 0.15 --rem-link-prob 0.15 --rem-simple-neuron-prob 0.15
python main.py -i drums_short.wav noise_short.wav -g 50 --num-runs 200 --keep-k-best 0 --write-stats-every 55 --add-neuron-prob 0.3 --add-link-prob 0.3 --rem-link-prob 0.3 --rem-simple-neuron-prob 0.3
python plot.py --label add_link_probability --output add_remove_link_rates.png --avg

# Multiple effects in parallel, and then a gain
python main.py -i drums_short.wav noise_short.wav --effects am bandpass bitreduce dist_lpf chorus new_layer gain --experiment-settings mfcc_bark.json -g 2500 -p 40 --write-stats-every 50 --patience 2500
